import { Injectable } from '@angular/core';
import { HttpClient,HttpHeaders} from '@angular/common/http';
import { catchError, Observable, throwError } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class BorrowService {
  private baseUrl = 'http://localhost:2024';

  constructor(private http: HttpClient) {}
 
  
  borrowBook(title: string, memberName: string): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token in request
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseUrl}/borrow/${title}/${memberName}`, {}, { headers });
  }

  returnBook(title: string, memberName: string): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token for authentication
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseUrl}/return/${title}/${memberName}`, {}, { headers });
}


  getHistoryByMember(memberName: string, page: number): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token for authentication
      'Content-Type': 'application/json'
    });

    return this.http.get(`${this.baseUrl}/borrow/history/${memberName}/${page}`, { headers });
  }

  getBorrowHistory(page: number, searchQuery?: string): Observable<any> {
    const token = localStorage.getItem("jwtToken");
    const headers = new HttpHeaders().set("Authorization", `Bearer ${token}`);
  
    let url = `${this.baseUrl}/borrow/all/${page}`;
    
    if (searchQuery && searchQuery.trim() !== '') {
      url += `?searchQuery=${encodeURIComponent(searchQuery)}`;
    }
  
    return this.http.get(url, { headers });
  }
  
}
import { Injectable } from '@angular/core';
import { HttpClient,HttpHeaders} from '@angular/common/http';
import { catchError, Observable, throwError } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class BorrowService {
  private baseUrl = 'http://localhost:2024';

  constructor(private http: HttpClient) {}
 
  
  borrowBook(title: string, memberName: string): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token in request
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseUrl}/borrow/${title}/${memberName}`, {}, { headers });
  }

  returnBook(title: string, memberName: string): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token for authentication
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseUrl}/return/${title}/${memberName}`, {}, { headers });
}


  getHistoryByMember(memberName: string, page: number): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token for authentication
      'Content-Type': 'application/json'
    });

    return this.http.get(`${this.baseUrl}/borrow/history/${memberName}/${page}`, { headers });
  }

  getBorrowHistory(page: number, searchQuery?: string): Observable<any> {
    const token = localStorage.getItem("jwtToken");
    const headers = new HttpHeaders().set("Authorization", `Bearer ${token}`);
  
    let url = `${this.baseUrl}/borrow/all/${page}`;
    
    if (searchQuery && searchQuery.trim() !== '') {
      url += `?searchQuery=${encodeURIComponent(searchQuery)}`;
    }
  
    return this.http.get(url, { headers });
  }
  
}
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface Fine {
  fineId: number;
  amount: number;
  status: string;
  transactionDate: string;
  paymentDate: string | null;
  member: {
    memberId: number;
    name: string;
    email: string;
    phone: string;
    address: string;
    membershipStatus: string;
    role: string;
  };
  borrowTransaction: {
    borrowId: number;
    borrowDate: string;
    returnDate: string;
    bookReturnOn: string | null;
    status: string;
    book: {
      id: number;
      title: string;
      author: string;
      genre: string;
      isbn: string;
      yearPublished: number;
      status: string;
    };
  };
}


@Injectable({
  providedIn: 'root'
})
export class FineService {
  private baseUrl = 'http://localhost:2024/fines'; // Adjust if needed

  constructor(private http: HttpClient) {}

  getAllFines(page: number): Observable<any> {
    const token = localStorage.getItem('jwtToken');
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
    return this.http.get<any>(`${this.baseUrl}/overdue/${page}`,{headers});
  
  }

  
  getFineHistoryByMemberName(name: string, page: number): Observable<any> {
    const token = localStorage.getItem('jwtToken'); // ✅ Retrieve stored token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`, // ✅ Attach token for authentication
      'Content-Type': 'application/json'
    });
   return this.http.get<any>(`${this.baseUrl}/${name}/${page}`,{headers});    
  }
    
  payFine(fineId: number): Observable<Fine> {
   return this.http.post<Fine>(`${this.baseUrl}/pay/${fineId}`, {});
 }
      

}
