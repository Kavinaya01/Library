public BorrowTransaction borrowBookByIsbn(String isbn, int memberId, BorrowRequest borrowRequest) {
    Member member = memberRepository.findById(memberId)
            .orElseThrow(() -> new RuntimeException("Member not found"));

    // Check member borrow limit
    List<BorrowTransaction> activeBorrows = borrowRepository.findByMember(member).stream()
            .filter(b -> "borrow".equalsIgnoreCase(b.getStatus()))
            .toList();

    if (activeBorrows.size() >= 3) {
        throw new RuntimeException("Borrow limit exceeded. Member can borrow a maximum of 3 books.");
    }

    // Fetch all books with the given ISBN
    List<Book> books = bookRepository.findByIsbn(isbn);

    // Find a copy that is not currently borrowed
    for (Book book : books) {
        boolean isBorrowed = borrowRepository.findByBook(book).stream()
                .anyMatch(b -> "borrow".equalsIgnoreCase(b.getStatus()));
        if (!isBorrowed) {
            // Book is available
            BorrowTransaction borrow = new BorrowTransaction();
            borrow.setBook(book);
            borrow.setMember(member);
            borrow.setBorrowDate(borrowRequest.getBorrowDate());
            borrow.setReturnDate(borrowRequest.getReturnDate());
            borrow.setStatus(borrowRequest.getStatus());

            return borrowRepository.save(borrow);
        }
    }

    throw new RuntimeException("No available copies for ISBN: " + isbn);
}
