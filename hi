import { Component, OnInit } from '@angular/core';
import { MemberBorrowService } from './member-borrow-history.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-member-borrow-history',
  templateUrl: './member-borrow-history.component.html',
  styleUrls: ['./member-borrow-history.component.css']
})
export class MemberBorrowHistoryComponent implements OnInit {

  borrowHistory: any[] = [];
  fines: any[] = [];
  memberName = ''; // Get from localStorage/session or AuthService
  showPasswordInput: number | null = null;
  passwordForm: FormGroup;

  constructor(private service: MemberBorrowService, private fb: FormBuilder) {
    this.passwordForm = this.fb.group({
      password: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.memberName = localStorage.getItem('memberName') || ''; // Replace with actual auth service
    this.fetchBorrowHistory();
    this.fetchFines();
  }

  fetchBorrowHistory() {
    this.service.getBorrowHistory(this.memberName).subscribe(data => {
      this.borrowHistory = data;
    });
  }

  fetchFines() {
    this.service.getFines(this.memberName).subscribe(data => {
      this.fines = data.content;
    });
  }

  returnBook(title: string) {
    this.service.returnBook(title, this.memberName).subscribe(() => {
      alert('Book returned!');
      this.fetchBorrowHistory();
      this.fetchFines();
    });
  }

  togglePasswordInput(fineId: number) {
    this.showPasswordInput = fineId;
  }

  payFine(fineId: number) {
    const enteredPassword = this.passwordForm.value.password;
    const actualPassword = localStorage.getItem('memberPassword'); // Simulated, replace with proper check

    if (enteredPassword === actualPassword) {
      this.service.payFine(fineId).subscribe(() => {
        alert('Fine paid successfully!');
        this.showPasswordInput = null;
        this.fetchFines();
      });
    } else {
      alert('Incorrect password!');
    }
  }
}



import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MemberBorrowService {
  private baseUrl = 'http://localhost:8080/api'; // Update base URL

  constructor(private http: HttpClient) {}

  getBorrowHistory(memberName: string) {
    return this.http.get<any[]>(`${this.baseUrl}/borrow/history/${memberName}`);
  }

  returnBook(title: string, name: string) {
    return this.http.post(`${this.baseUrl}/fine/return/${title}/${name}`, {});
  }

  getFines(name: string) {
    return this.http.get<any>(`${this.baseUrl}/fine/${name}/0`);
  }

  payFine(fineId: number) {
    return this.http.post(`${this.baseUrl}/fine/pay/${fineId}`, {});
  }
}



<div class="container py-4">
  <h2 class="mb-4 text-white">Borrow History</h2>
  
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let book of borrowHistory">
      <div class="card shadow-lg h-100">
        <div class="card-body">
          <h5 class="card-title">{{ book.book.title }}</h5>
          <p class="card-text">
            <strong>Borrowed On:</strong> {{ book.borrowDate }}<br>
            <strong>Status:</strong> {{ book.status }}
          </p>
          <button class="btn btn-danger" (click)="returnBook(book.book.title)" [disabled]="book.status === 'returned'">
            Return Book
          </button>
        </div>
      </div>
    </div>
  </div>

  <h2 class="mt-5 mb-4 text-white">Fines</h2>
  <div class="row">
    <div class="col-md-4 mb-4" *ngFor="let fine of fines">
      <div class="card bg-warning-subtle shadow">
        <div class="card-body">
          <h5 class="card-title">Fine #{{ fine.id }}</h5>
          <p class="card-text">
            <strong>Amount:</strong> â‚¹{{ fine.amount }}<br>
            <strong>Status:</strong> {{ fine.status }}<br>
            <strong>Due Date:</strong> {{ fine.dueDate }}
          </p>

          <div *ngIf="showPasswordInput === fine.id">
            <form [formGroup]="passwordForm" (ngSubmit)="payFine(fine.id)">
           <input type="password" class="form-control mb-2" placeholder="Enter your password" formControlName="password">
              <button class="btn btn-primary w-100" type="submit" [disabled]="passwordForm.invalid">Pay Fine</button>
            </form>
          </div>
          
          <button *ngIf="fine.status === 'unpaid' && showPasswordInput !== fine.id" class="btn btn-dark" (click)="togglePasswordInput(fine.id)">
            Pay Fine
          </button>
        </div>
      </div>
    </div>
  </div>
</div>



body {
  background: linear-gradient(to right, #1C1C1E, #4B0082);
}

.card {
  border-radius: 20px;
  transition: transform 0.3s ease-in-out;
}

.card:hover {
  transform: scale(1.03);
}

.card-body {
  font-size: 16px;
}
