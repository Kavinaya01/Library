public BorrowTransaction borrowBookByTitle(String title, int memberId) {
    // 1. Get member
    Member member = memberRepository.findById(memberId)
        .orElseThrow(() -> new RuntimeException("Member not found"));

    // 2. Check active borrow count
    List<BorrowTransaction> activeBorrows = borrowRepository
        .findByMemberIdAndStatus(memberId, "borrowed");

    if (activeBorrows.size() >= 3) {
        throw new RuntimeException("Borrow limit exceeded. Member can borrow up to 3 books.");
    }

    // 3. Get available book by title
    Book book = bookRepository.findFirstByTitleAndStatus(title, "available")
        .orElseThrow(() -> new RuntimeException("No available copy of this title"));

    // 4. Update book status
    book.setStatus("borrowed");
    bookRepository.save(book);

    // 5. Decrement available copies
    AvailableCount count = availableCountRepository.findByIsbn(book.getIsbn())
        .orElseThrow(() -> new RuntimeException("Available copy info not found"));
    if (count.getAvailableCopies() <= 0) {
        throw new RuntimeException("No copies available to borrow");
    }
    count.setAvailableCopies(count.getAvailableCopies() - 1);
    availableCountRepository.save(count);

    // 6. Create and save borrow transaction
    BorrowTransaction borrow = new BorrowTransaction();
    borrow.setBook(book);
    borrow.setMember(member);
    borrow.setStatus("borrowed");
    borrow.setBorrowDate(LocalDate.now());
    borrow.setReturnDate(LocalDate.now().plusDays(14)); // 2-week default

    return borrowRepository.save(borrow);
}
