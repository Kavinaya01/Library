@PostMapping("/member")
public ResponseEntity<?> memberLogin(@RequestBody LoginRequest loginRequest) {
Â  Â  Optional<Member> optionalMember = authService.getMemberByEmail(loginRequest.getEmail());

Â  Â  if (optionalMember.isPresent()) {
Â  Â  Â  Â  Member member = optionalMember.get();

Â  Â  Â  Â  if (passwordEncoder.matches(loginRequest.getPassword(), member.getPassword())) {
Â  Â  Â  Â  Â  Â  loginService.saveLogin(member.getMemberId(), member.getEmail(), "MEMBER");

Â  Â  Â  Â  Â  Â  // âœ… ADD THIS: include name in token payload
Â  Â  Â  Â  Â  Â  String token = jwtUtil.generateToken(member.getEmail(), "ROLE_MEMBER", member.getName());

Â  Â  Â  Â  Â  Â  return ResponseEntity.ok(new AuthResponse(token,"MEMBER"));
Â  Â  Â  Â  }
Â  Â  }

Â  Â  return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid member credentials!");
}

public String generateToken(String email, String role, String memberName) {
Â  Â  Map<String, Object> claims = new HashMap<>();
Â  Â  claims.put("role", role);
Â  Â  claims.put("memberName", memberName); // ðŸ‘ˆ included in JWT payload
Â  Â  return createToken(claims, email);
}
